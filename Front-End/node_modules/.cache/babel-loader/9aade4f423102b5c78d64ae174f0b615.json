{"ast":null,"code":"var _jsxFileName = \"/home/amal/Desktop/newstuff/frontend/src/components/WeatherContainer.jsx\";\nimport React from \"react\";\nimport \"./WeatherContainer.css\";\nimport Form from \"./form.component\";\nimport Weather from \"./weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nconst Api_Key = \"7e7acfc9f208e8087bbc3752e31ee24e\";\n\nclass WeatherContainer extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const country = this.state.country;\n      const city = this.state.city;\n      setState(); // const country = e.target.elements.country.value;\n      // const city = e.target.elements.city.value;\n\n      if (country && city) {\n        const api_call = await fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&appid=\").concat(Api_Key));\n        const response = await api_call.json();\n        this.setState({\n          // city: `${response.name}, ${response.sys.country}`,\n          // country: response.sys.country,\n          main: response.weather[0].main,\n          celsius: this.calCelsius(response.main.temp),\n          temp_max: this.calCelsius(response.main.temp_max),\n          temp_min: this.calCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          error: false\n        });\n        this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n        console.log(response);\n      }\n    };\n\n    this.state = {\n      city: '',\n      country: \"jordan\",\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({\n          icon: icons.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: icons.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({\n          icon: icons.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: icons.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: icons.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: icons.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: icons.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: icons.Clouds\n        });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Form, {\n      loadweather: this.getWeather,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      cityname: this.props.name,\n      weatherIcon: this.state.icon,\n      temp_celsius: this.state.celsius,\n      temp_max: this.state.temp_max,\n      temp_min: this.state.temp_min,\n      description: this.state.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default WeatherContainer;","map":{"version":3,"sources":["/home/amal/Desktop/newstuff/frontend/src/components/WeatherContainer.jsx"],"names":["React","Form","Weather","Api_Key","WeatherContainer","Component","constructor","getWeather","e","preventDefault","country","state","city","setState","api_call","fetch","response","json","main","weather","celsius","calCelsius","temp","temp_max","temp_min","description","error","get_WeatherIcon","weatherIcon","id","console","log","icon","undefined","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","cell","Math","floor","render","props","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./WeatherContainer.css\";\nimport Form from \"./form.component\";\nimport Weather from \"./weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"weather-icons/css/weather-icons.css\";\n\nconst Api_Key = \"7e7acfc9f208e8087bbc3752e31ee24e\";\n\nclass WeatherContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: '',\n      country: \"jordan\",\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const {country}=this.state;\n    const {city}=this.state;\n    setState()\n    // const country = e.target.elements.country.value;\n    // const city = e.target.elements.city.value;\n\n    if (country && city) {\n      const api_call = await fetch(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n      );\n\n      const response = await api_call.json();\n\n      this.setState({\n        // city: `${response.name}, ${response.sys.country}`,\n        // country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\n      console.log(response);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather\n          cityname={this.props.name}\n          weatherIcon={this.state.icon}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n        />\n      </div>\n    );\n  }\n}\n\nexport default WeatherContainer;\n\n"]},"metadata":{},"sourceType":"module"}